{
  "name": "argparser",
  "version": "0.2.2",
  "description": "object to parse commandline-args and options.",
  "keywords": [
    "getopt",
    "arguments",
    "option",
    "getopts",
    "command"
  ],
  "author": {
    "name": "SHIN Suzuki",
    "email": "shinout310@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/shinout/argparser.git"
  },
  "bugs": {
    "url": "https://github.com/shinout/argparser/issues"
  },
  "licences": [
    {
      "type": "MIT",
      "url": "https://github.com/shinout/argparser/raw/master/LICENCE"
    }
  ],
  "main": "./ArgParser.js",
  "readme": "argparser\n==================\n[Node.js] Parses command line args and options.\n\n## Installation ##\n    git clone git://github.com/shinout/argparser.git\n\n    OR\n\n    npm install argparser\n\n## Usage ##\n\na command \n\n    node script.js -r --num 100 file1.txt 11\n\nin script.js\n\n    var ap = require('argparser')\n             .files(0)\n             .nums(1, \"num\")\n             .nonvals('r')\n             .parse();\n\n    var file = ap.arg(0) // \"file1.txt\"\n    var n    = ap.arg(1) // 11\n    var num  = ap.opt(\"num\") // 100\n    var r    = ap.opt(\"r\")   // true\n\n## API Documentation ##\n- ArgParser.create()\n- ap.vals()\n- ap.nonvals()\n- ap.files()\n- ap.dirs()\n- ap.nums()\n- ap.defaults()\n- ap.err()\n- ap.arglen()\n- ap.parse(arr)\n- ap.opt(op1, op2, ...)\n- ap.arg()\n- ap.stringify()\n- ap.invalids()\n- ap.emptyValue\n\n### ArgParser.create() ###\nCreates an instance of ArgParser.\n\n    var ap = ArgParser.create().parse();\n\nThis can be omitted using **shortcut methods**.\n\nReturns an instance of ArgParser.\n\n### ap.vals() ###\nAdds options with value.\n\na command \n\n    node script.js --seq ACTG -n 1\n\nin script.js\n\n    var ap = require('argparser')\n             .vals(\"n\", \"seq\")\n             .parse();\n\n    var n   = ap.opt(\"n\")   // \"1\"\n    var seq = ap.opt(\"seq\") // \"ACTG\"\n\n\"--\" is used for long option name (more than one characters).\n\n\"-\" is used for short option name (just one character).\n\n    node script.js --long long -s short\n\nReturns this.\n\n### ap.nonvals() ###\nAdds options without values.\n\na command \n\n    node script.js -t --no-save\n\nin script.js\n\n    var ap = require('argparser')\n             .nonvals(\"t\", \"no-save\")\n             .parse();\n\n    var t      = ap.opt(\"t\")       // true\n    var nosave = ap.opt(\"no-save\") // true\n\n\"--\" is used for long option name (more than one characters).\n\n\"-\" is used for short option name (just one character).\n\n    node script.js --long -s\n\nReturns this.\n\n### ap.files() ###\nSpecifies an argument or an option is a file.\n\nThese values are checked in **ap.parse()**.\n\nIf there is an invalid filename, an exception is thrown.\n\na command \n\n    node script.js --txt foo.txt bar.txt\n\nin script.js\n\n    var ap = require('argparser')\n             .files(\"txt\", 0)\n             .parse();\n\n    var txt    = ap.opt(\"txt\")  // \"foo.txt\"\n    var nosave = ap.arg(0)      // \"bar.txt\"\n\n\"0\" in the example means the first argument.\n\n\"1\" will be the second, and so on.\n\nWe don't need to call **ap.vals()** to the option name used in **ap.files()**.\n\nReturns this.\n\n\n### ap.dirs() ###\nSpecifies an argument or an option is a directory.\n\nThe same specs as **ap.files()**.\n\nReturns this.\n\n### ap.nums() ###\nSpecifies an argument or an option is a number.\n\nIf isNaN, an exception is thrown.\n\na command \n\n    node script.js -n 11 bar.txt 300\n\nin script.js\n\n    var ap = require('argparser')\n             .files(0)\n             .nums(\"n\", 1)\n             .parse();\n\n    var file   = ap.arg(0)   // \"bar.txt\"\n    var n      = ap.opt(\"n\") // 11 \n    console.log(typeof n) // \"number\"\n    var num    = ap.arg(1) // 300\n    console.log(typeof num) // \"number\"\n\nThe same specs as **ap.files()**.\n\nReturns this.\n\n\n### ap.defaults(obj, noSetNums) ###\nset default values to options with a value.\n\na command \n\n    node script.js\n\nin script.js\n\n    var ap = require('argparser')\n             .defaults({\n               n : 3,\n               file : \"file1.txt\"\n              })\n             .files(\"file\")\n             .parse();\n\n    var n = ap.opt(\"n\") // 3\n    var file = ap.opt(\"file\") // \"file1.txt\"\n\nIf **noSetNums** is true, **ap.nums()** is not called to options\nwhose default value is number.\nBy default, **ap.nums()** are called to these options automatically.\n\n\n### ap.err(fn) ###\nRegisters a function called when an error is thrown in parsing.\n\nThe argument passed to **fn** is the thrown error.\n\nReturn value of the function is the return value of **ap.parse()**.\n\nBy default, it returns **false**.\n\n    var ap = require('argparser')\n             .files(0)\n             .err(function(e) {\n               console.error(e.message)\n               console.error(\"[usage]\\n\\tnode\", __filename, \"<file>\")\n             })\n             .parse();\n\n    if (!ap) process.exit();\n\n\n### ap.arglen(min, max) ###\nRegisters a limit of argument length.\n\nArgParser throws an error if **min** is larger than arguments.length.\n\nArgParser throws an error if **max** is smaller than arguments.length.\n\nWe can set just **min** like the following sample.\n\n    var ap = require('argparser')\n             .arglen(3) // three arguments are required\n             .parse();\n\n\n\n### ap.parse(arr) ###\nParses arguments.\n\n**arr** is optional.\n\nIf **arr** is not set, parses **process.argv** (without process.argv[0] and process.argv[1]).\n\n    var ap = require('argparser').files(0, \"f\").parse([\"-f\", \"file1.txt\", \"file2.txt\"]);\n    var f  = ap.opt(\"f\"); // \"file1.txt\"\n    var f2 = ap.arg(0);   // \"file2.txt\"\n\n\n### ap.arg() ###\nGet arguments. \n\na command \n\n    node script.js arg1 arg2 --opt arg3 --valopt optval\n\nin script.js\n\n    var ap = require('argparser')\n             .vals(\"valopt\")\n             .nonvals(\"opt\")\n             .parse();\n\n    var a1 = ap.arg(0); // arg1\n    var a2 = ap.arg(1); // arg2\n    var a3 = ap.arg(2); // arg3\n    var a4 = ap.arg(3); // undefined\n\n\n### ap.opt(op1, op2, ...) ###\nGet options value.\n\na command \n\n    node script.js -o --valopt optval arg1 --aaa\n \nin script.js\n\n    var ap = require('argparser')\n             .vals(\"valopt\", \"v2\")\n             .nonvals(\"o\", \"opt\")\n             .parse();\n\nWhen registered vals options are passed, returns the value.\n\n    var o1 = ap.opt(\"valopt\"); // \"optval\"\n\nWhen registered nonvals options are passed, returns true.\n\n    var o2 = ap.opt(\"o\");      // true\n\n\nWhen registered options are not passed, returns **ap.emptyValue**.\n    \n    console.log(ap.emptyValue) // false\n    var o3 = ap.opt(\"opt\");    // false\n    var o4 = ap.opt(\"v2\");     // false\n\n**ap.emptyValue** is writable.\n\n\nIf multiple arguments are passed, the first matched value is returned.\n\n    var o3 = ap.opt(\"opt\", \"o\");    // true\n    var o4 = ap.opt(\"valopt\", \"v2); // \"optval\"\n\n\nWhen not a registered option is passed, it is parsed as an invalid nonval option.\n\n    var o5 = ap.opt(\"aaa\");    // true\n    var o6 = ap.invalids();    // [\"aaa\"]\n    var o7 = ap.opt(\"eee\");    // undefined\n\n\n### ap.emptyValue ###\nWhen a registered options is not set, this value is returned in **ap.opt()**.\n\n    ap.emptyValue = null\n\n\n### ap.invalids() ###\nGets a list of invalid options.\n\na command \n\n    node script.js -a --bcd\n\nin script.js\n\n    var ap = require('argparser').parse();\n    var list = ap.invalid();\n    console.log(list); // \"a\", \"bcd\"\n\n\n### ap.stringify() ###\nGets canonical format.\n\na command \n\n    node script.js -a 1 arg1 -t --invalid_opt --bcd file.txt arg2 arg3\n\nin script.js\n\n    var ap = require('argparser')\n             .vals(\"a\", \"bcd\")\n             .nonvals(\"t\")\n             .parse();\n    console.log(ap.stringify()); // -t -a 1 --bcd file.txt arg1 arg2 arg3\n\n**Note that invalid options are removed.**\n\n## shortcut methods ##\n\n- ArgParser.vals()\n- ArgParser.nonvals()\n- ArgParser.files()\n- ArgParser.dirs()\n- ArgParser.nums()\n- ArgParser.defaults()\n- ArgParser.parse()\n\n    ArgParser.vals(\"a\")\n\nis completely equivalent to\n\n    ArgParser.create().vals(\"a\")\n\n## licence ##\n(The MIT License)\n\nCopyright (c) 2011-2012 SHIN Suzuki <shinout310@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "argparser@0.2.2",
  "dist": {
    "shasum": "340da81ecba386fa30419553831877d67c3a72bd"
  },
  "_from": "argparser@0.2",
  "_resolved": "https://registry.npmjs.org/argparser/-/argparser-0.2.2.tgz"
}
